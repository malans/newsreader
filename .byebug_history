c
@orderedFeeds.map {|feed| puts feed.title}
@orderedFeeds
orderedFeeds@
params[:page]
c
@orderedFeeds.map {|feed| puts feed.title}
@orderedFeeds = feedSource.feeds.order('published DESC').reorder("updated DESC").page(0).per(3)
@orderedFeeds.map {|feed| puts feed.title}
@orderedFeeds = feedSource.feeds.order('published DESC').reorder("updated DESC").page(1).per(3)
@orderedFeeds.map {|feed| puts feed.title}
@orderedFeeds = feedSource.feeds.order('published DESC').reorder("updated DESC").page(2).per(3)
@orderedFeeds.map {|feed| puts feed.title}
@orderedFeeds = feedSource.feeds.order('published DESC').reorder("updated DESC").page(0).per(3)
@orderedFeeds.map {|feed| puts feed.title}
params[:page]
@orderedFeeds
c
params[:page]
c
params[:page]
c
params[:page]
c
@orderedFeeds.map {|feed| puts feed.title}
@orderedFeeds.each {|feed| puts feed.title}
@orderedFeeds
c
@orderedFeeds
orderedFeeds
c
params
params[:id]
c
params
params[:id]
c
params[:id]
c
b = feedSource.feeds.order('published DESC').reorder("updated DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
feedSource.feeds[0].updated
c
feedSource.feeds[0].updated
c
feedSource.feeds[0].updated
feedSource.feeds[0].updated || feedSource.feeds[0].published
feedSource.feeds[0].updated
feedSource.feeds[0]
feedSource
b = feedSource.feeds.order('published DESC').reorder("updated DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
c
feedItem.updated
c
cc
c
feedItem.updated
c
b = feedSource.feeds.order('published DESC').reorder("updated DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
c
b = feedSource.feeds.order('updated DESC').reorder("published DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
c
b = feedSource.feeds.order('updated DESC').reorder("published DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
b = feedSource.feeds.order('published DESC').reorder("updated DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
b = feedSource.feeds.order('published DESC').each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
b = feedSource.feeds.order('published DESC').reorder("updated DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
c
b = feedSource.feeds.order('published DESC').reorder("updated DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
b = feedSource.feeds.order('published DESC').order("updated DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
b = feedSource.feeds.order('published DESC').each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
feedSource.feeds.order('published DESC').each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
feedSource.feeds.order('published DESC').each {|a| puts "#{a.published} #{a.updated} #{a.title}"}
feedSource.feeds.order('published DESC').each {|a| puts "#{a.title} #{a.published} #{a.updated}"}
feedSource.feeds.order('published DESC')
c
orderedFeeds.class
c
orderedFeeds.class
c
orderedFeeds.class
c
orderedFeeds.page(3).per(2)
feedSource.feeds.page(3).per(2)
feedSource.feeds.class
orderedFeeds.class
c
feedSource.feeds.to_a.count {|feed| feed.unread == true};
feedSource.feeds.count {|feed| feed.unread == true};
feedSource.feeds.all.count {|feed| feed.unread == true};
feedSource.feeds.all.count {|feed| puts 
feedSource.feeds.all.count {|feed| puts feed.unread == true};
feedSource.feeds.count {|feed| puts feed.unread == true};
feedSource.feeds.each {|feed| puts feed.unread == true};
feedSource.feeds[-1].unread == true
feedSource.feeds[0].unread == true
feedSource.feeds.each {|feed| puts "#{feed.unread}"};
feedSource.feeds.count {|feed| feed.unread === true}
feedSource.feeds.each {|feed| puts "#{feed.unread}"};
feedSource.feeds.count {|feed| feed.unread == true}
feedSource
c
feedSource
c
feedSource.feeds.each {|feed| puts "#{feed.unread}"}
feedSource.feeds.each {|feed| puts "#{feed.title} #{feed.unread}"}
feedSource.feeds.each {|feed| "#{feed.title} #{feed.unread}"}
feedSource.feeds.each {|feed| "#{feed.title} #{feed.unread}}
feedSource.feeds.each {|feed| puts feed.title}
feedSource.feeds[0].title
feedSource.feeds[0]
feedSource.feeds
feedSource
c
feedSource
unreadCountHash
c
unreadCountHash
feedSource
n
feedSource
c
feedSource
c
feedSource
c
feedSource
c
feedSource
cc
c
feed.unread
feed
n
c
unreadCountHash
c
feedSource.id
c
nc
n
c
n
c
feedc
n
feedId
n
c
orderedFeeds
c
orderedFeeds
c
parsedFeed.entries[0].published
c
   52:                      .where("feed_items.published BETWEEN ? AND ?", DateTime.n
   51:                      .select("feed_items.*")
sortFeeds(current_user.feeds
DateTime.now - 1.day
DateTime.now
c
feeds.each {|feed| puts feed.title}
sortedFeeds.each {|feed| puts feed.title}
sortedFeeds
c
feedSource.feeds.each {|feed| puts "#{feed.id} #{feed.title}"}
feedSource.feeds
feedSource.feedSource.feeds
c
parsedFeed.entries.each {|feed| puts "#{feed.title} #{feed.published} #{feed.updated}"}
parsedFeed.entries.each {|feed| puts "#{feed.title} #{feed.published
feedItem.title
c
feedItem.title
c
feedItem.title
c
parsedFeed.entries.each {|feed| puts feed.title}
feedItem.title
c
parsedFeed.entries[0].title
parsedFeed.entries
feedItem.title
c
parsedFeed.entries.each {|feed| puts feed.title}
feedSource.feeds.each {|feed| puts "#{feed.id} #{feed.title}"}
feedSource.feeds.each {|feed| puts feed.id, feed.title}
feedSource.feeds.each {|feed| puts feed.id feed.title}
feedSource.feeds.each {|feed| puts feed.title}
c
feedSource.feeds.each {|feed| puts feed.title}
c
feedSource.feeds.each {|feed| puts feed.title}
feedSource.feeds.each do {|feed| puts feed.title}
feedSource.feeds
c
feedSource.feeds.each {|feed| puts feed.id}
c
feedSource.feeds.each {|feed| puts feed.id}
c
feedSource.feeds.each {|feed| puts feed.id}
c
feedSource.feeds.each {|feed| puts feed.id}
c
feedSource.feeds.each {|feed| puts feed.id}
c
feedSource.feeds.each {|feed| puts feed.title}
feedSource.feeds.each {|feed| puts.feed.title}
puts "hello"
feedSource.feeds.each do |feed|
feedSource.feeds
c
exit
feedSource.feeds.each {|feed| puts feed.title, feed.id}
feedSource.feeds.each do |feed|
feedSource.feeds
feedSource
parsedFeed.entries[2].url
parsedFeed.entries[1].url
parsedFeed.entries[0].url
parsedFeed = Feedjira::Feed.fetch_and_parse url
url = feedSource.url
feedSource = FeedSource.find(feedSourceId)
feedSourceId = params[:id]
c
parsedFeed.entries[1].url
parsedFeed.entries[0].url
n
parsedFeed.entries[0].title
parsedFeed = Feedjira::Feed.fetch_and_parse url
url = feedSource.url
feedSource = FeedSource.find(feedSourceId)
feedSourceId = params[:id]
c
cccc
c
cc
c
n
cc
c
n
c
FeedItem.all
n
feedItem.title
FeedItem.all.length
FeedItem.all
n
feedItem.summary
feedItem.author
feedItem
c
feedSource.feeds
feedSource
c
feedSource.feeds
feedSource
