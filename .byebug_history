c
sortedFeeds
c
n
sortFeeds(current_user.feeds.select("feed_items.*").where("feed_items.saved_for_later = ?", true))
   76:                      .where("feed_items.saved_for_later = ?", true)
   75:                      .select("feed_items.*")
current_user.feeds
c
n
feed.valid?
feed
n
feed
n
params[:id]
c
FeedSource.find_by(userFeedSources_params)
c
userFeedSources_params
c
FeedSource.find_by({url: "http://feeds.feedburner.com/MainlyMacro"c})
FeedSource.find_by({url: "http://feeds.feedburner.com/MainlyMacro"})
FeedSource.find_by_url("http://feeds.feedburner.com/MainlyMacro")
FeedSource.find_by_title("mm")
FeedSource.find_by(userFeedSources_params)
userFeedSources_params
c
userFeedSources_params
c
s
n
c
n
u = User.find(current_user.id)
User.find(current_user.id)
User.find(currentUser.id)
current_user.id
user_id
@feedSource
n
@feedSource
c
C
c
current_user
c
cccc
c
feedItem.published
c
feedItem.published
feedItem
feedItem.updated_at
feedItem.updated
c
feedItem.published
feedItem.updated
feedItem.updated_at
feedItem.updated
feedItem
c
logged_in_method
c
session[:login_method]
c
logged_in_method
c
session[:login_method]
sessio[:login_method]
c
self.login_method
@login_method
login_method
session[:session_token]
session[:login_method]
session
c
logged_in_method
c
login_method
c
@login_method
c
@login_method
c
login_method
c
n
login_method
c
login_method
c
login_method
c
self.login_method
self.action_name
self.methods - Object.methods
self.class
self
c
@login_method
c
@login_method
c
login_method
c
login_method
c
login_method
c
login_method
c
login_method
c
login_method
c
todayFeeds
login_method
c
login_method
c
login_method
c
n
authentication
n
c
user.valid?
user
n
c
n
user
authentication
n
c
omniauth['email']
omniauth['info']['email']
omniauth['info']
user
n
user.authentications
user
n
current_user
n
authentication
n
omniauth
n
c
@user.valid?
@user.errors
@user.save
@user.valid?
@user
n
@user.valid?
user_params
c
self.request.class.ancestors
self.request.class
self.request
self.class
self
c
self
self.request
c
@orderedFeeds.map {|feed| puts feed.title}
@orderedFeeds
orderedFeeds@
params[:page]
c
@orderedFeeds.map {|feed| puts feed.title}
@orderedFeeds = feedSource.feeds.order('published DESC').reorder("updated DESC").page(0).per(3)
@orderedFeeds.map {|feed| puts feed.title}
@orderedFeeds = feedSource.feeds.order('published DESC').reorder("updated DESC").page(1).per(3)
@orderedFeeds.map {|feed| puts feed.title}
@orderedFeeds = feedSource.feeds.order('published DESC').reorder("updated DESC").page(2).per(3)
@orderedFeeds.map {|feed| puts feed.title}
@orderedFeeds = feedSource.feeds.order('published DESC').reorder("updated DESC").page(0).per(3)
@orderedFeeds.map {|feed| puts feed.title}
params[:page]
@orderedFeeds
c
params[:page]
c
params[:page]
c
params[:page]
c
@orderedFeeds.map {|feed| puts feed.title}
@orderedFeeds.each {|feed| puts feed.title}
@orderedFeeds
c
@orderedFeeds
orderedFeeds
c
params
params[:id]
c
params
params[:id]
c
params[:id]
c
b = feedSource.feeds.order('published DESC').reorder("updated DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
feedSource.feeds[0].updated
c
feedSource.feeds[0].updated
c
feedSource.feeds[0].updated
feedSource.feeds[0].updated || feedSource.feeds[0].published
feedSource.feeds[0].updated
feedSource.feeds[0]
feedSource
b = feedSource.feeds.order('published DESC').reorder("updated DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
c
feedItem.updated
c
cc
c
feedItem.updated
c
b = feedSource.feeds.order('published DESC').reorder("updated DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
c
b = feedSource.feeds.order('updated DESC').reorder("published DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
c
b = feedSource.feeds.order('updated DESC').reorder("published DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
b = feedSource.feeds.order('published DESC').reorder("updated DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
b = feedSource.feeds.order('published DESC').each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
b = feedSource.feeds.order('published DESC').reorder("updated DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
c
b = feedSource.feeds.order('published DESC').reorder("updated DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
b = feedSource.feeds.order('published DESC').order("updated DESC").each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
b = feedSource.feeds.order('published DESC').each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
feedSource.feeds.order('published DESC').each {|a| puts "#{a.published} #{a.updated} #{a.title}"};
feedSource.feeds.order('published DESC').each {|a| puts "#{a.published} #{a.updated} #{a.title}"}
feedSource.feeds.order('published DESC').each {|a| puts "#{a.title} #{a.published} #{a.updated}"}
feedSource.feeds.order('published DESC')
c
orderedFeeds.class
c
orderedFeeds.class
c
orderedFeeds.class
c
orderedFeeds.page(3).per(2)
feedSource.feeds.page(3).per(2)
feedSource.feeds.class
orderedFeeds.class
c
feedSource.feeds.to_a.count {|feed| feed.unread == true};
feedSource.feeds.count {|feed| feed.unread == true};
